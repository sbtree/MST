package peak.demo;

import java.awt.Image;
import java.awt.Toolkit;
import java.util.HashMap;
import javax.swing.JTextField;

import javax.swing.table.TableColumn;

import peak.canlight.CANLight;
import peak.canlight.CANMessage;
import peak.canlight.RcvEventDispatcher;

public class Application extends javax.swing.JFrame
{

    /** Creates new form Application */
    public Application()
    {

        //Splash Screen
        splash(VersionInformation);

        //Init Components
        initComponents();

        //Icon
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("image/IconPeak.png"));
        setIconImage(icon);

        //Init TimeStamp Grid Column
        columnTimeStamp = new TableColumn();
        columnTimeStamp.setMinWidth(100);
        columnTimeStamp.setMaxWidth(100);
        columnTimeStamp.setWidth(100);
        columnTimeStamp.setResizable(false);
        columnTimeStamp.setHeaderValue("Rcv Time");
        columnTimeStamp.setModelIndex(5);
        tableMessage.getColumnModel().removeColumn(tableMessage.getColumnModel().getColumn(tableMessage.getColumnModel().getColumnCount() - 1));

        //Configure controls
        cbbHwsActionPerformed(null);
        chbTimeStampActionPerformed(null);

        //Create and start Table Message Thread
        tableMessageThread = new TableMessageThread(tableMessage, receivedData);
        tableMessageThread.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanelHardware = new javax.swing.JPanel();
        cbbHws = new javax.swing.JComboBox();
        btnInfo = new javax.swing.JButton();
        btnDllInfo = new javax.swing.JButton();
        btnInit = new javax.swing.JButton();
        btnRelease = new javax.swing.JButton();
        btnGetUsbDevNumber = new javax.swing.JButton();
        btnSetUsbDevNumber = new javax.swing.JButton();
        nudDevNumber = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbbBaudrates = new javax.swing.JComboBox();
        cbbMsgType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbbIO = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbbInterrupt = new javax.swing.JComboBox();
        jPanelFilter = new javax.swing.JPanel();
        rdbExtended = new javax.swing.JRadioButton();
        rdbStandard = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtIdFrom = new javax.swing.JTextField();
        txtIdTo = new javax.swing.JTextField();
        btnSetFilter = new javax.swing.JButton();
        btnResetFilter = new javax.swing.JButton();
        jPanelRead = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableMessage = new javax.swing.JTable();
        chbTimeStamp = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        rdbTimer = new javax.swing.JRadioButton();
        rdbEvent = new javax.swing.JRadioButton();
        jPanelInfo = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        jPanelWrite = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        nudLength = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtData0 = new javax.swing.JTextField();
        btnWrite = new javax.swing.JButton();
        chbExtended = new javax.swing.JCheckBox();
        chbRemote = new javax.swing.JCheckBox();
        txtData1 = new javax.swing.JTextField();
        txtData2 = new javax.swing.JTextField();
        txtData3 = new javax.swing.JTextField();
        txtData4 = new javax.swing.JTextField();
        txtData5 = new javax.swing.JTextField();
        txtData6 = new javax.swing.JTextField();
        txtData7 = new javax.swing.JTextField();
        btnClose = new javax.swing.JButton();
        btnResetClient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("I CAN Do It! - Light");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelHardware.setBorder(javax.swing.BorderFactory.createTitledBorder("Hardware"));

        cbbHws.setMaximumRowCount(15);
        cbbHws.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ISA", "ISA 2-CH", "PCI", "PCI 2-CH", "PCC", "PCC 2-CH", "USB 1-CH", "USB 2-CH", "DONGLE PRO", "DONGLE" }));
        cbbHws.setMinimumSize(new java.awt.Dimension(128, 18));
        cbbHws.setPreferredSize(new java.awt.Dimension(128, 20));
        cbbHws.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbHwsActionPerformed(evt);
            }
        });

        btnInfo.setText("Get Info");
        btnInfo.setEnabled(false);
        btnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoActionPerformed(evt);
            }
        });

        btnDllInfo.setText("Get Dll Info");
        btnDllInfo.setEnabled(false);
        btnDllInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDllInfoActionPerformed(evt);
            }
        });

        btnInit.setText("Initialize");
        btnInit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitActionPerformed(evt);
            }
        });

        btnRelease.setText("Release");
        btnRelease.setEnabled(false);
        btnRelease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReleaseActionPerformed(evt);
            }
        });

        btnGetUsbDevNumber.setText("Get USB Device Number");
        btnGetUsbDevNumber.setEnabled(false);
        btnGetUsbDevNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetUsbDevNumberActionPerformed(evt);
            }
        });

        btnSetUsbDevNumber.setText("Set USB Device Number");
        btnSetUsbDevNumber.setEnabled(false);
        btnSetUsbDevNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetUsbDevNumberActionPerformed(evt);
            }
        });

        nudDevNumber.setModel(new javax.swing.SpinnerNumberModel(0, 0, 255, 1));

        jLabel1.setText("Baudrate:");

        jLabel2.setText("Msg Type:");

        cbbBaudrates.setMaximumRowCount(15);
        cbbBaudrates.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 MBit/sec", "500 KBit/sec", "250 KBit/sec", "125 KBit/sec", "100 KBit/sec", "50 KBit/sec", "20 KBit/sec", "10 KBit/sec", "5 KBit/sec" }));
        cbbBaudrates.setMinimumSize(new java.awt.Dimension(128, 18));
        cbbBaudrates.setPreferredSize(new java.awt.Dimension(128, 20));

        cbbMsgType.setMaximumRowCount(15);
        cbbMsgType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Standard", "Extended" }));
        cbbMsgType.setMinimumSize(new java.awt.Dimension(128, 18));
        cbbMsgType.setPreferredSize(new java.awt.Dimension(128, 20));

        jLabel3.setText("I/O Address:");

        cbbIO.setMaximumRowCount(15);
        cbbIO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0100", "0120", "0140", "0200", "0220", "0240", "0260", "0278", "0280", "02A0", "02C0", "02E0", "02E8", "02F8", "0300", "0320", "0340", "0360", "0378", "0380", "03BC", "03E0", "03E8", "03F8" }));
        cbbIO.setMinimumSize(new java.awt.Dimension(128, 18));
        cbbIO.setPreferredSize(new java.awt.Dimension(128, 20));

        jLabel4.setText("Interrupt:");

        cbbInterrupt.setMaximumRowCount(15);
        cbbInterrupt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4", "5", "7", "9", "10", "11", "12", "15" }));
        cbbInterrupt.setMinimumSize(new java.awt.Dimension(128, 18));
        cbbInterrupt.setPreferredSize(new java.awt.Dimension(128, 20));

        javax.swing.GroupLayout jPanelHardwareLayout = new javax.swing.GroupLayout(jPanelHardware);
        jPanelHardware.setLayout(jPanelHardwareLayout);
        jPanelHardwareLayout.setHorizontalGroup(
            jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHardwareLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHardwareLayout.createSequentialGroup()
                        .addComponent(cbbHws, 0, 78, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDllInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnInit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRelease, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelHardwareLayout.createSequentialGroup()
                        .addComponent(btnGetUsbDevNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetUsbDevNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nudDevNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelHardwareLayout.createSequentialGroup()
                        .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbbBaudrates, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cbbMsgType, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cbbIO, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(cbbInterrupt, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanelHardwareLayout.setVerticalGroup(
            jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHardwareLayout.createSequentialGroup()
                .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbHws, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInfo)
                    .addComponent(btnDllInfo)
                    .addComponent(btnInit)
                    .addComponent(btnRelease))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGetUsbDevNumber)
                    .addComponent(btnSetUsbDevNumber)
                    .addComponent(nudDevNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanelHardwareLayout.createSequentialGroup()
                            .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanelHardwareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbbBaudrates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbbMsgType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanelHardwareLayout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbbIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelHardwareLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbInterrupt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder("Message Filter"));

        buttonGroup1.add(rdbExtended);
        rdbExtended.setText("Extended");
        rdbExtended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbExtendedActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbStandard);
        rdbStandard.setSelected(true);
        rdbStandard.setText("Standard");
        rdbStandard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbStandardActionPerformed(evt);
            }
        });

        jLabel5.setText("From:");

        jLabel6.setText("To:");

        txtIdFrom.setColumns(3);
        txtIdFrom.setText("0");
        txtIdFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdFromFocusLost(evt);
            }
        });
        txtIdFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdFromKeyTyped(evt);
            }
        });

        txtIdTo.setText("0");
        txtIdTo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIdToFocusLost(evt);
            }
        });
        txtIdTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIdToKeyTyped(evt);
            }
        });

        btnSetFilter.setText("Set");
        btnSetFilter.setEnabled(false);
        btnSetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFilterActionPerformed(evt);
            }
        });

        btnResetFilter.setText("Reset");
        btnResetFilter.setEnabled(false);
        btnResetFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelFilterLayout = new javax.swing.GroupLayout(jPanelFilter);
        jPanelFilter.setLayout(jPanelFilterLayout);
        jPanelFilterLayout.setHorizontalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbStandard)
                    .addComponent(rdbExtended))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtIdFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanelFilterLayout.createSequentialGroup()
                        .addComponent(txtIdTo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnResetFilter)))
                .addContainerGap(142, Short.MAX_VALUE))
        );
        jPanelFilterLayout.setVerticalGroup(
            jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterLayout.createSequentialGroup()
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbStandard)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbExtended)
                    .addComponent(txtIdFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetFilter)
                    .addComponent(btnResetFilter)))
        );

        jPanelRead.setBorder(javax.swing.BorderFactory.createTitledBorder("Read Messages"));

        tableMessage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "ID", "Length", "Data", "Count", "Rcv Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMessage.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tableMessage);
        tableMessage.getColumnModel().getColumn(0).setResizable(false);
        tableMessage.getColumnModel().getColumn(0).setPreferredWidth(70);
        tableMessage.getColumnModel().getColumn(1).setResizable(false);
        tableMessage.getColumnModel().getColumn(1).setPreferredWidth(70);
        tableMessage.getColumnModel().getColumn(2).setResizable(false);
        tableMessage.getColumnModel().getColumn(2).setPreferredWidth(50);
        tableMessage.getColumnModel().getColumn(3).setResizable(false);
        tableMessage.getColumnModel().getColumn(3).setPreferredWidth(170);
        tableMessage.getColumnModel().getColumn(4).setResizable(false);
        tableMessage.getColumnModel().getColumn(4).setPreferredWidth(70);
        tableMessage.getColumnModel().getColumn(5).setResizable(false);
        tableMessage.getColumnModel().getColumn(5).setPreferredWidth(100);

        chbTimeStamp.setText("Show Time Stamp");
        chbTimeStamp.setEnabled(false);
        chbTimeStamp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbTimeStampActionPerformed(evt);
            }
        });

        jLabel10.setText("Read Method:");

        buttonGroup2.add(rdbTimer);
        rdbTimer.setSelected(true);
        rdbTimer.setText("By Timer");
        rdbTimer.setEnabled(false);
        rdbTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTimerActionPerformed(evt);
            }
        });

        buttonGroup2.add(rdbEvent);
        rdbEvent.setText("By Event");
        rdbEvent.setEnabled(false);
        rdbEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbEventActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelReadLayout = new javax.swing.GroupLayout(jPanelRead);
        jPanelRead.setLayout(jPanelReadLayout);
        jPanelReadLayout.setHorizontalGroup(
            jPanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbTimeStamp)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addGroup(jPanelReadLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdbTimer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdbEvent)))
                .addContainerGap())
        );
        jPanelReadLayout.setVerticalGroup(
            jPanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelReadLayout.createSequentialGroup()
                .addGroup(jPanelReadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(rdbTimer)
                    .addComponent(rdbEvent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbTimeStamp))
        );

        jPanelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        txtInfo.setColumns(20);
        txtInfo.setEditable(false);
        txtInfo.setLineWrap(true);
        txtInfo.setRows(5);
        txtInfo.setText("Select a Hardware and a configuration for it. Then click \"Initialize\" button");
        jScrollPane3.setViewportView(txtInfo);

        javax.swing.GroupLayout jPanelInfoLayout = new javax.swing.GroupLayout(jPanelInfo);
        jPanelInfo.setLayout(jPanelInfoLayout);
        jPanelInfoLayout.setHorizontalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelInfoLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanelInfoLayout.setVerticalGroup(
            jPanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelInfoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelWrite.setBorder(javax.swing.BorderFactory.createTitledBorder("Write Messages"));

        txtID.setText("0");
        txtID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtIDFocusLost(evt);
            }
        });
        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIDKeyTyped(evt);
            }
        });

        jLabel7.setText("ID (Hex):");

        nudLength.setModel(new javax.swing.SpinnerNumberModel(0, 0, 8, 1));
        nudLength.setValue(8);
        nudLength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nudLengthStateChanged(evt);
            }
        });

        jLabel8.setText("Length:");

        jLabel9.setText("Data (0..7):");

        txtData0.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData0.setText("00");
        txtData0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData0FocusLost(evt);
            }
        });
        txtData0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData0KeyTyped(evt);
            }
        });

        btnWrite.setText("Write Message");
        btnWrite.setEnabled(false);
        btnWrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWriteActionPerformed(evt);
            }
        });

        chbExtended.setText("Extended Frame");
        chbExtended.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chbExtended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbExtendedActionPerformed(evt);
            }
        });

        chbRemote.setText("Remote Request");
        chbRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbRemoteActionPerformed(evt);
            }
        });

        txtData1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData1.setText("00");
        txtData1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData1FocusLost(evt);
            }
        });
        txtData1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData1KeyTyped(evt);
            }
        });

        txtData2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData2.setText("00");
        txtData2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData2FocusLost(evt);
            }
        });
        txtData2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData2KeyTyped(evt);
            }
        });

        txtData3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData3.setText("00");
        txtData3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData3FocusLost(evt);
            }
        });
        txtData3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData3KeyTyped(evt);
            }
        });

        txtData4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData4.setText("00");
        txtData4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData4FocusLost(evt);
            }
        });
        txtData4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData4KeyTyped(evt);
            }
        });

        txtData5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData5.setText("00");
        txtData5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData5FocusLost(evt);
            }
        });
        txtData5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData5KeyTyped(evt);
            }
        });

        txtData6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData6.setText("00");
        txtData6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData6FocusLost(evt);
            }
        });
        txtData6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData6KeyTyped(evt);
            }
        });

        txtData7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtData7.setText("00");
        txtData7.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtData7FocusLost(evt);
            }
        });
        txtData7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtData7KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanelWriteLayout = new javax.swing.GroupLayout(jPanelWrite);
        jPanelWrite.setLayout(jPanelWriteLayout);
        jPanelWriteLayout.setHorizontalGroup(
            jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWriteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelWriteLayout.createSequentialGroup()
                        .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nudLength)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanelWriteLayout.createSequentialGroup()
                                .addComponent(txtData0, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtData7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnWrite))))
                    .addGroup(jPanelWriteLayout.createSequentialGroup()
                        .addComponent(chbExtended)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chbRemote)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelWriteLayout.setVerticalGroup(
            jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWriteLayout.createSequentialGroup()
                .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nudLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtData7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnWrite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelWriteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbExtended)
                    .addComponent(chbRemote)))
        );

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnResetClient.setText("Reset Client");
        btnResetClient.setEnabled(false);
        btnResetClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetClientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelHardware, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelWrite, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelFilter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelRead, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnResetClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelHardware, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelWrite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnResetClient))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitActionPerformed
        try
        {
            int res;
            String textInfo;

            // We try to initialize selected Hardware Type
            if (canLight.initializeAPI(cbbHws.getSelectedIndex()))
            {
                // According to the active parameters/hardware, we
                // use one of the two possible "Init" PCANLight functions.
                // One is for Plug-and-Play hardware, and the other for
                // Non-P&P.
                if (cbbIO.isEnabled())
                    // Non-P&P Hardware
                    res = canLight.init(getBaudrate(), getFrameType(), getIOAddress(), getInterrupt());
                else
                    // P&P Hardware
                    res = canLight.init(getBaudrate(), getFrameType());

                // The Hardware was successfully initiated
                if (res == CANLight.ERR_OK)
                {
                    changeReadMode(rdbTimer.isSelected());
                    showConnectedState(true);

                    // We show the information of the configured
                    // and initiated hardware
                    //
                    textInfo = "Active Hardware: " + cbbHws.getSelectedItem().toString();
                    textInfo += "\r\nBaud Rate: " + cbbBaudrates.getSelectedItem().toString();
                    textInfo += "\r\nFrame Type: " + cbbMsgType.getSelectedItem().toString();
                    // If was a no P&P Hardware, we show additional information
                    //
                    if (cbbIO.isEnabled())
                    {
                        textInfo += "\r\nI/O Addr.: " + cbbIO.getSelectedItem().toString() + "h";
                        textInfo += "\r\nInterrupt: " + cbbInterrupt.getSelectedItem().toString();
                    }
                    showInfo(textInfo, false);
                }
                else
                    showInfo(getErrorName(res), true);
            }
            else
            {
                //Process Last Error code
                long lastErrorCode = canLight.getLastError();

                //Check If A dynamic link library (DLL) initialization routine failed.
                if (lastErrorCode == 1114)
                    MessageBoxes.ShowError("A dynamic link library (DLL) initialization routine failed.\r\nPlease, verify no program is using the hardware DLL.", "DLL Initialization Failed !");
                else
                    MessageBoxes.ShowError("DLL 2.x or later are required to run this program.\r\nPlease, download lastest DLL version on http://www.peak-system.com or refer to the documentation for more information.", "Dll Version");
            }
        }
        catch (Exception ex)
        {
            showInfo(ex.toString(), true);
            return;
        }
    }//GEN-LAST:event_btnInitActionPerformed

    private void cbbHwsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbHwsActionPerformed

        Boolean enableIOConfig = false;

        //Check If selected Hardware use IO parameters
        switch (cbbHws.getSelectedIndex())
        {
            case 0:
            case 1:
            case 8:
            case 9:
                enableIOConfig = true;
                break;
        }

        //Set IO Config
        cbbIO.setEnabled(enableIOConfig);
        cbbInterrupt.setEnabled(enableIOConfig);
    }//GEN-LAST:event_cbbHwsActionPerformed

    private void btnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoActionPerformed

        int res;
        StringBuffer strVersion = new StringBuffer("");

        // We execute the "VersionInfo" function of the PCANLight
        // using as parameter a string variable to get the info.
        res = canLight.getVersionInfo(strVersion);
        if (res == CANLight.ERR_OK)
            showInfo(strVersion.toString(), false);
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnInfoActionPerformed

    private void btnDllInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDllInfoActionPerformed
        int res;
        StringBuffer strVersion = new StringBuffer("");

        // We execute the "DLLVersionInfo" function of the PCANLight
        // using as parameter a string variable to get the info.
        res = canLight.getDLLVersionInfo(strVersion);
        if (res == CANLight.ERR_OK)
        // We show the Version Information
        {
            strVersion.insert(0, cbbHws.getSelectedItem().toString() + " Dll Version: ");
            showInfo(strVersion.toString(), false);
        }
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnDllInfoActionPerformed

    private void btnGetUsbDevNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetUsbDevNumberActionPerformed

        int[] deviceNumber = new int[1];
        int res;
        String strInfo = "";

        // Get the USB Device Number
        res = canLight.getUSBDeviceNr(deviceNumber);

        // The Device number was gotten successfully
        if (res == CANLight.ERR_OK)
        {
            strInfo = "USB Device Number is: " + ((Integer) deviceNumber[0]).toString();
            MessageBoxes.ShowMessage(strInfo, "GetUSBDevNr");
        }
        // An error occurred.  We show the error.
        else
            txtInfo.setText(getErrorName(res));
    }//GEN-LAST:event_btnGetUsbDevNumberActionPerformed

    private void btnSetUsbDevNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetUsbDevNumberActionPerformed
        int deviceNumber;
        int res;
        String strInfo = "";

        deviceNumber = Integer.parseInt(nudDevNumber.getValue().toString());

        // Set the USB Device Number
        res = canLight.setUSBDeviceNr(deviceNumber);

        // The Device number was changed successfully
        if (res == CANLight.ERR_OK)
        {
            strInfo = "USB Device Number was successfully changed to: " + ((Integer) deviceNumber).toString();
            MessageBoxes.ShowMessage(strInfo, "SetUSBDevNr");
        }
        // An error occurred.  We show the error.
        else
            txtInfo.setText(getErrorName(res));
    }//GEN-LAST:event_btnSetUsbDevNumberActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        // Don't forget to release harware
        btnReleaseActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void chbTimeStampActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbTimeStampActionPerformed
    {//GEN-HEADEREND:event_chbTimeStampActionPerformed
        // Configure canReadThread to call the right CAN function
        if (canReadThread != null)
            canReadThread.setUseReadEx(chbTimeStamp.isSelected());

        // Add or Remove column
        if (chbTimeStamp.isSelected())
            tableMessage.getColumnModel().addColumn(columnTimeStamp);
        else
            tableMessage.getColumnModel().removeColumn(columnTimeStamp);

    }//GEN-LAST:event_chbTimeStampActionPerformed

    private void btnReleaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnReleaseActionPerformed
    {//GEN-HEADEREND:event_btnReleaseActionPerformed
        int ret;

        //Check btn release is enable
        if (btnRelease.isEnabled())
        {
            // We close the active hardware using the
            // "Close" function of the PCANLight using
            // as parameter the Hardware type.
            ret = canLight.close();
            try
            {
                // We stop the timer thread
                if ((canReadThread != null) && (!canReadThread.isInterrupted()))
                {
                    canReadThread.interrupt();
                    canReadThread.join();
                }

                // We set the varibale of active hardware to None
                // and activate/deactivate the corresponding buttons
                showConnectedState(false);
                showInfo("Hardware was successfully Released.\r\n", false);
            }
            catch (InterruptedException ex)
            {
                showInfo(ex.toString(), true);
            }
            
            // An error occurred. We show the error
            if (ret != CANLight.ERR_OK)
                showInfo(getErrorName(ret), true);
        }
    }//GEN-LAST:event_btnReleaseActionPerformed

    private void txtIdFromKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtIdFromKeyTyped
    {//GEN-HEADEREND:event_txtIdFromKeyTyped
        char chCheck;

        // We convert the Character to its Upper case equivalent
        chCheck = Character.toUpperCase(evt.getKeyChar());

        // The Key is the Delete (Backspace) Key
        if (chCheck == 8)
            return;
        // The Key is a number between 0-9
        if ((chCheck > 47) && (chCheck < 58))
            return;
        // The Key is a character between A-F
        if ((chCheck > 64) && (chCheck < 71))
            return;

        // Is neither a number nor a character between A(a) and F(f)
        evt.consume();
    }//GEN-LAST:event_txtIdFromKeyTyped

    private void txtIdToKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtIdToKeyTyped
    {//GEN-HEADEREND:event_txtIdToKeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtIdToKeyTyped

    private void txtIdFromFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtIdFromFocusLost
    {//GEN-HEADEREND:event_txtIdFromFocusLost
        checkFilterId((JTextField) evt.getComponent(), rdbExtended.isSelected());
    }//GEN-LAST:event_txtIdFromFocusLost

    private void txtIdToFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtIdToFocusLost
    {//GEN-HEADEREND:event_txtIdToFocusLost
        checkFilterId((JTextField) evt.getComponent(), rdbExtended.isSelected());
    }//GEN-LAST:event_txtIdToFocusLost

    private void rdbStandardActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbStandardActionPerformed
    {//GEN-HEADEREND:event_rdbStandardActionPerformed
        // If is selected, checkFilterId for txtIdFrom and txtIdTo
        if (rdbStandard.isSelected())
        {
            checkFilterId(txtIdFrom, rdbExtended.isSelected());
            checkFilterId(txtIdTo, rdbExtended.isSelected());
        }
    }//GEN-LAST:event_rdbStandardActionPerformed

    private void rdbExtendedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbExtendedActionPerformed
    {//GEN-HEADEREND:event_rdbExtendedActionPerformed
        // If is selected, checkFilterId for txtIdFrom and txtIdTo
        if (rdbExtended.isSelected())
        {
            checkFilterId(txtIdFrom, rdbExtended.isSelected());
            checkFilterId(txtIdTo, rdbExtended.isSelected());
        }
    }//GEN-LAST:event_rdbExtendedActionPerformed

    private void btnSetFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSetFilterActionPerformed
    {//GEN-HEADEREND:event_btnSetFilterActionPerformed
        int fromID, toID;
        int res;

        // The range IDs is read
        fromID = Integer.parseInt(txtIdFrom.getText(), 16);
        toID = Integer.parseInt(txtIdTo.getText(), 16);

        // The desired filter is set on the configured hardware
        res = canLight.setFilter(fromID, toID, rdbStandard.isSelected() ? CANLight.MSGTYPE_STANDARD : CANLight.MSGTYPE_EXTENDED);

        // The filter was successfully set
        if (res == CANLight.ERR_OK)
            showInfo("Filter was successfully SET.\r\n", false);
        // An error occurred.  We show the error.
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnSetFilterActionPerformed

    private void btnResetFilterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetFilterActionPerformed
    {//GEN-HEADEREND:event_btnResetFilterActionPerformed
        int res;

        // The current filter on the configured hardware is reset
        res = canLight.resetFilter();

        // The filter was successfully reset
        if (res == CANLight.ERR_OK)
            showInfo("Filter was successfully RESET.\r\n", false);
        // An error occurred.  We show the error.
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnResetFilterActionPerformed

    private void nudLengthStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_nudLengthStateChanged
    {//GEN-HEADEREND:event_nudLengthStateChanged
        int selectedLength;
        selectedLength = (Integer) nudLength.getValue() - 1;

        //Enable or disable txtData regarding selected length
        txtData0.setEnabled((selectedLength >= 0) ? true : false);
        txtData1.setEnabled((selectedLength >= 1) ? true : false);
        txtData2.setEnabled((selectedLength >= 2) ? true : false);
        txtData3.setEnabled((selectedLength >= 3) ? true : false);
        txtData4.setEnabled((selectedLength >= 4) ? true : false);
        txtData5.setEnabled((selectedLength >= 5) ? true : false);
        txtData6.setEnabled((selectedLength >= 6) ? true : false);
        txtData7.setEnabled((selectedLength >= 7) ? true : false);
    }//GEN-LAST:event_nudLengthStateChanged

    private void chbRemoteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbRemoteActionPerformed
    {//GEN-HEADEREND:event_chbRemoteActionPerformed
        boolean useTxtData = !chbRemote.isSelected();

        //Show or hide txtData depending it's a remote message
        txtData0.setVisible(useTxtData);
        txtData1.setVisible(useTxtData);
        txtData2.setVisible(useTxtData);
        txtData3.setVisible(useTxtData);
        txtData4.setVisible(useTxtData);
        txtData5.setVisible(useTxtData);
        txtData6.setVisible(useTxtData);
        txtData7.setVisible(useTxtData);
    }//GEN-LAST:event_chbRemoteActionPerformed

    private void txtIDKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtIDKeyTyped
    {//GEN-HEADEREND:event_txtIDKeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtIDKeyTyped

    private void txtIDFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtIDFocusLost
    {//GEN-HEADEREND:event_txtIDFocusLost
        checkFilterId((JTextField) evt.getComponent(), chbExtended.isSelected());
    }//GEN-LAST:event_txtIDFocusLost

    private void chbExtendedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbExtendedActionPerformed
    {//GEN-HEADEREND:event_chbExtendedActionPerformed
        checkFilterId(txtID, chbExtended.isSelected());
    }//GEN-LAST:event_chbExtendedActionPerformed

    private void txtData0KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData0KeyTyped
    {//GEN-HEADEREND:event_txtData0KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData0KeyTyped

    private void txtData1KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData1KeyTyped
    {//GEN-HEADEREND:event_txtData1KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData1KeyTyped

    private void txtData2KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData2KeyTyped
    {//GEN-HEADEREND:event_txtData2KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData2KeyTyped

    private void txtData3KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData3KeyTyped
    {//GEN-HEADEREND:event_txtData3KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData3KeyTyped

    private void txtData4KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData4KeyTyped
    {//GEN-HEADEREND:event_txtData4KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData4KeyTyped

    private void txtData5KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData5KeyTyped
    {//GEN-HEADEREND:event_txtData5KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData5KeyTyped

    private void txtData6KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData6KeyTyped
    {//GEN-HEADEREND:event_txtData6KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData6KeyTyped

    private void txtData7KeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtData7KeyTyped
    {//GEN-HEADEREND:event_txtData7KeyTyped
        txtIdFromKeyTyped(evt);
    }//GEN-LAST:event_txtData7KeyTyped

    private void txtData0FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData0FocusLost
    {//GEN-HEADEREND:event_txtData0FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData0FocusLost

    private void txtData1FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData1FocusLost
    {//GEN-HEADEREND:event_txtData1FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData1FocusLost

    private void txtData2FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData2FocusLost
    {//GEN-HEADEREND:event_txtData2FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData2FocusLost

    private void txtData3FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData3FocusLost
    {//GEN-HEADEREND:event_txtData3FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData3FocusLost

    private void txtData4FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData4FocusLost
    {//GEN-HEADEREND:event_txtData4FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData4FocusLost

    private void txtData5FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData5FocusLost
    {//GEN-HEADEREND:event_txtData5FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData5FocusLost

    private void txtData6FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData6FocusLost
    {//GEN-HEADEREND:event_txtData6FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData6FocusLost

    private void txtData7FocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtData7FocusLost
    {//GEN-HEADEREND:event_txtData7FocusLost
        checkDataBox((JTextField) evt.getComponent());
    }//GEN-LAST:event_txtData7FocusLost

    private void btnWriteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnWriteActionPerformed
    {//GEN-HEADEREND:event_btnWriteActionPerformed
        CANMessage msgToSend;
        int res;

        // We create a TCLightMsg message structure
        msgToSend = new CANMessage();

        // We configurate the Message.  The ID (max 0x1FF),
        // Length of the Data, Message Type (Standard in
        // this example) and die data
        msgToSend.setID((int) hexTextToInt(txtID.getText()));
        msgToSend.setLength(Byte.parseByte(nudLength.getValue().toString()));
        msgToSend.setType((chbExtended.isSelected()) ? CANLight.MSGTYPE_EXTENDED : CANLight.MSGTYPE_STANDARD);

        // If a remote frame will be sent, the data bytes are not important.
        if (chbRemote.isSelected())
        {
            res = msgToSend.getType() | CANLight.MSGTYPE_RTR;
            msgToSend.setType((byte) res);
        }
        else
        {
            // We get so much data as the Len of the message
            if (msgToSend.getLength() >= 1)
                msgToSend.getData()[0] = (byte) hexTextToInt(txtData0.getText());
            if (msgToSend.getLength() >= 2)
                msgToSend.getData()[1] = (byte) hexTextToInt(txtData1.getText());
            if (msgToSend.getLength() >= 3)
                msgToSend.getData()[2] = (byte) hexTextToInt(txtData2.getText());
            if (msgToSend.getLength() >= 4)
                msgToSend.getData()[3] = (byte) hexTextToInt(txtData3.getText());
            if (msgToSend.getLength() >= 5)
                msgToSend.getData()[4] = (byte) hexTextToInt(txtData4.getText());
            if (msgToSend.getLength() >= 6)
                msgToSend.getData()[5] = (byte) hexTextToInt(txtData5.getText());
            if (msgToSend.getLength() >= 7)
                msgToSend.getData()[6] = (byte) hexTextToInt(txtData6.getText());
            if (msgToSend.getLength() >= 8)
                msgToSend.getData()[7] = (byte) hexTextToInt(txtData7.getText());
        }

        // The message is sent to the configured hardware
        res = canLight.write(msgToSend);

        // The Hardware was successfully sent
        if (res == CANLight.ERR_OK)
            showInfo("Message was successfully SENT.\r\n", false);
        // An error occurred.  We show the error.
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnWriteActionPerformed

    private void rdbEventActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbEventActionPerformed
    {//GEN-HEADEREND:event_rdbEventActionPerformed
        changeReadMode(rdbTimer.isSelected());
    }//GEN-LAST:event_rdbEventActionPerformed

    private void rdbTimerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdbTimerActionPerformed
    {//GEN-HEADEREND:event_rdbTimerActionPerformed
        changeReadMode(rdbTimer.isSelected());
    }//GEN-LAST:event_rdbTimerActionPerformed

    private void btnResetClientActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetClientActionPerformed
    {//GEN-HEADEREND:event_btnResetClientActionPerformed
        int res;

        // The message is sent to the configured hardware
        res = canLight.resetClient();

        // The Hardware was successfully sent
        if (res == CANLight.ERR_OK)
            showInfo("Client was successfully RESET.\r\n", false);
        // An error occurred.  We show the error.
        else
            showInfo(getErrorName(res), true);
    }//GEN-LAST:event_btnResetClientActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCloseActionPerformed
    {//GEN-HEADEREND:event_btnCloseActionPerformed
        // Don't forget to release hardware
        btnReleaseActionPerformed(null);
        // Exit the application
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        new Application().setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDllInfo;
    private javax.swing.JButton btnGetUsbDevNumber;
    private javax.swing.JButton btnInfo;
    private javax.swing.JButton btnInit;
    private javax.swing.JButton btnRelease;
    private javax.swing.JButton btnResetClient;
    private javax.swing.JButton btnResetFilter;
    private javax.swing.JButton btnSetFilter;
    private javax.swing.JButton btnSetUsbDevNumber;
    private javax.swing.JButton btnWrite;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cbbBaudrates;
    private javax.swing.JComboBox cbbHws;
    private javax.swing.JComboBox cbbIO;
    private javax.swing.JComboBox cbbInterrupt;
    private javax.swing.JComboBox cbbMsgType;
    private javax.swing.JCheckBox chbExtended;
    private javax.swing.JCheckBox chbRemote;
    private javax.swing.JCheckBox chbTimeStamp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanelFilter;
    private javax.swing.JPanel jPanelHardware;
    private javax.swing.JPanel jPanelInfo;
    private javax.swing.JPanel jPanelRead;
    private javax.swing.JPanel jPanelWrite;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner nudDevNumber;
    private javax.swing.JSpinner nudLength;
    private javax.swing.JRadioButton rdbEvent;
    private javax.swing.JRadioButton rdbExtended;
    private javax.swing.JRadioButton rdbStandard;
    private javax.swing.JRadioButton rdbTimer;
    private javax.swing.JTable tableMessage;
    private javax.swing.JTextField txtData0;
    private javax.swing.JTextField txtData1;
    private javax.swing.JTextField txtData2;
    private javax.swing.JTextField txtData3;
    private javax.swing.JTextField txtData4;
    private javax.swing.JTextField txtData5;
    private javax.swing.JTextField txtData6;
    private javax.swing.JTextField txtData7;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtIdFrom;
    private javax.swing.JTextField txtIdTo;
    private javax.swing.JTextArea txtInfo;
    // End of variables declaration//GEN-END:variables
    // Version Information
    static private final String VersionInformation = "Version 2.0";
    // Static Token For Synchronization
    static public final Object token = new Object();
    // CANLight object
    static private CANLight canLight = new CANLight();
    // Thread to read CAN messages
    CANReadThread canReadThread;
    // Thread to refresh data grid
    TableMessageThread tableMessageThread;
    // Map to store received messages
    private HashMap receivedData = new HashMap();
    // Grid column to show TimeStamp
    private TableColumn columnTimeStamp = null;

    /* Shows a splash screen with the peak logo
     * and infos about the hardware
     */
    public void splash(String versioninformation)
    {
        SplashScreen s;
        String info = null;
        try
        {
            info = "Version 2.0";
            s = new SplashScreen("image/LogoPeak.png", info);
            s.showFor(3000);
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }

    }

    /* Returns Selected BaudRate
     */
    public int getBaudrate()
    {
        int baud = 0;
        switch (cbbBaudrates.getSelectedIndex())
        {
            case 8:
                baud = CANLight.BAUD_5K;
                break;

            case 7:
                baud = CANLight.BAUD_10K;
                break;

            case 6:
                baud = CANLight.BAUD_20K;
                break;

            case 5:
                baud = CANLight.BAUD_50K;
                break;

            case 4:
                baud = CANLight.BAUD_100K;
                break;

            case 3:
                baud = CANLight.BAUD_125K;
                break;

            case 2:
                baud = CANLight.BAUD_250K;
                break;

            case 1:
                baud = CANLight.BAUD_500K;
                break;

            case 0:
                baud = CANLight.BAUD_1M;
                break;

        }
        return baud;
    }

    /* Returns Selected IO Address
     */
    public int getIOAddress()
    {
        return Integer.parseInt(cbbIO.getSelectedItem().toString(), 16);
    }

    /* Returns Selected Interrupt
     */
    public int getInterrupt()
    {
        return Integer.parseInt(cbbInterrupt.getSelectedItem().toString(), 16);
    }

    /* Returns Selected Frame Type
     */
    public int getFrameType()
    {
        int type = 0;
        switch (cbbBaudrates.getSelectedIndex())
        {
            case 0:
                type = CANLight.MAX_STANDARD_ID;
                break;

            case 1:
                type = CANLight.MAX_EXTENDED_ID;
                break;

        }
        return type;
    }

    /* Activate/deactivate controls regarding
     * hardware connection state
     */
    private void showConnectedState(boolean connected)
    {
        //UI Controls
        btnInit.setEnabled(!connected);
        btnRelease.setEnabled(connected);
        btnInfo.setEnabled(connected);
        btnDllInfo.setEnabled(connected);
        btnSetFilter.setEnabled(connected);
        btnResetFilter.setEnabled(connected);
        btnWrite.setEnabled(connected);
        rdbEvent.setEnabled(connected);
        rdbTimer.setEnabled(connected);
        chbTimeStamp.setEnabled(connected);
        cbbHws.setEnabled(!connected);
        cbbBaudrates.setEnabled(!connected);
        cbbMsgType.setEnabled(!connected);
        btnResetClient.setEnabled(connected);

        Boolean enableUSBConfig = false;
        if (connected)
            // Check hardware == USB
            switch (cbbHws.getSelectedIndex())
            {
                case 6:
                case 7:
                    enableUSBConfig = true;
                    break;
            }
        else
        {
            // Reset time stamp column
            chbTimeStamp.setSelected(false);
            chbTimeStampActionPerformed(null);

            // Reset read method
            rdbTimer.setSelected(true);
        }

        //Set USB Config
        btnGetUsbDevNumber.setEnabled(enableUSBConfig);
        btnSetUsbDevNumber.setEnabled(enableUSBConfig);
        nudDevNumber.setEnabled(enableUSBConfig);
    }

    private void showInfo(String text, boolean error)
    {
        //If it's an error message, configure foreground in red
        if (error)
            txtInfo.setForeground(new java.awt.Color(255, 0, 0));
        //Else configure foreground in black
        else
            txtInfo.setForeground(new java.awt.Color(0, 0, 0));
        // Update txtInfo box
        txtInfo.setText(text);
    }

    /*
     * Returns a string result corresponding to the CANLight error.
     */
    private String getErrorName(int code)
    {
        String name = "";
        switch (code)
        {
            case CANLight.ERR_XMTFULL:
                name = "Transmit buffer of the controller is full.";
                break;

            case CANLight.ERR_OVERRUN:
                name = "CAN controller has been read out too late.";
                break;

            case CANLight.ERR_BUSLIGHT:
                name = "Bus error: An error counter has reached the 'Light' limit.";
                break;

            case CANLight.ERR_BUSHEAVY:
                name = "Bus error: An error counter has reached the 'Heavy' limit.";
                break;

            case CANLight.ERR_BUSOFF:
                name = "Bus error: The CAN controller is in 'Bus Off' state.";
                break;

            case CANLight.ERR_QRCVEMPTY:
                name = "Receive queue is empty.";
                break;

            case CANLight.ERR_QOVERRUN:
                name = "Receive queue has been read out too late.";
                break;

            case CANLight.ERR_QXMTFULL:
                name = "Transmit queue is full.";
                break;

            case CANLight.ERR_REGTEST:
                name = "Register test of the 82C200/SJA1000 has failed.";
                break;

            case CANLight.ERR_NOVXD:
                name = "Driver is not loaded.";
                break;

            case CANLight.ERR_ILLHW:
                name = "Invalid Hardware handle.";
                break;

            case CANLight.ERR_RESOURCE:
                name = "Resource (FIFO, client, timer) cannot be created.";
                break;

            case CANLight.ERR_PARMTYP:
                name = "Parameter is not permitted/applicable here.";
                break;

            case CANLight.ERR_PARMVAL:
                name = "Parameter value is invalid.";
                break;

            case CANLight.ERR_MASK_ILLHANDLE:
                name = "Mask for all handle errors.";
                break;

            case CANLight.ERR_ANYBUSERR:
                name = "All others error status <> 0 please ask by PEAK ......intern Driver errors.....";
                break;

            case CANLight.ERR_NO_DLL:
                name = "A Dll could not be loaded or a function was not found into the Dll.";
                break;

            case CANLight.ERR_HWINUSE:
                name = "Hardware is already used by the network.";
                break;

            case CANLight.ERR_NETINUSE:
                name = "At least one client is connected on the network.";
                break;

            default:
                name = "Unknowed Error: 0x" + Integer.toHexString(code);
                break;
        }
        return name;
    }

    /*
     * Check JTextField hexadecimal content
     */
    private void checkFilterId(JTextField IdBox, boolean isExtended)
    {
        int TextLength;
        int MaxValue;
        int maxLength = 3;

        //Set To Upper Case
        IdBox.setText(IdBox.getText().toUpperCase());

        //We verify number of characters
        if (isExtended)
            maxLength = 8;
        if (IdBox.getText().length() > maxLength)
            IdBox.setText(IdBox.getText().substring(0, maxLength));

        // calculate the text length and Maximum ID value according
        // with the Message Type
        TextLength = (isExtended) ? 8 : 3;
        MaxValue = (isExtended) ? (int) 0x1FFFFFFF : (int) 0x7FF;

        // The Textbox for the ID is represented with 3 characters for
        // Standard and 8 characters for extended messages.
        // Therefore if the Length of the text is smaller than TextLength,
        // we add "0"
        while (IdBox.getText().length() != TextLength)
        {
            IdBox.setText("0" + IdBox.getText());
        }

        // Because in this example will be sent only Standard messages
        // we check that the ID is not bigger than 0x7FF
        if (Integer.parseInt(IdBox.getText(), 16) > MaxValue)
            if (isExtended)
                IdBox.setText("1FFFFFFF");
            else
                IdBox.setText("7FF");
    }

    private void checkDataBox(JTextField IdBox)
    {
        int MaxValue;

        //Set To Upper Case
        IdBox.setText(IdBox.getText().toUpperCase());

        //We verify number of characters
        if (IdBox.getText().length() > 2)
            IdBox.setText(IdBox.getText().substring(0, 2));

        // calculate the text length and Maximum ID value according
        // with the Message Type
        MaxValue = (int) 0x7FF;

        // The Textbox for the ID is represented with 3 characters for
        // Standard and 8 characters for extended messages.
        // Therefore if the Length of the text is smaller than TextLength,
        // we add "0"
        while (IdBox.getText().length() != 2)
        {
            IdBox.setText("0" + IdBox.getText());
        }

        // Because in this example will be sent only Standard messages
        // we check that the ID is not bigger than 0x7FF
        if (Integer.parseInt(IdBox.getText(), 16) > MaxValue)
            IdBox.setText("7FF");

    }

    /*
     * Convert a string to hex
     */
    static long hexTextToInt(String toConvert)
    {
        long iToReturn = 0;
        int iExp = 0;
        char chByte;

        // The string to convert is empty
        if (toConvert.equals(""))
            return 0;
        // The string have more than 8 character (the equivalent value
        // exeeds the DWORD capacyty
        if (toConvert.length() > 8)
            return 0;
        // We convert any character to its Upper case
        toConvert = toConvert.toUpperCase();
        try
        {
            // We calculate the number using the Hex To Decimal formula
            for (int i = toConvert.length() - 1; i >= 0; i--)
            {
                chByte = (char) toConvert.getBytes()[i];
                switch ((int) chByte)
                {
                    case 65:
                        iToReturn += (long) (10 * Math.pow(16.0f, iExp));
                        break;
                    case 66:
                        iToReturn += (long) (11 * Math.pow(16.0f, iExp));
                        break;
                    case 67:
                        iToReturn += (long) (12 * Math.pow(16.0f, iExp));
                        break;
                    case 68:
                        iToReturn += (long) (13 * Math.pow(16.0f, iExp));
                        break;
                    case 69:
                        iToReturn += (long) (14 * Math.pow(16.0f, iExp));
                        break;
                    case 70:
                        iToReturn += (long) (15 * Math.pow(16.0f, iExp));
                        break;
                    default:
                        if ((chByte < 48) || (chByte > 57))
                            return -1;
                        iToReturn += (long) Integer.parseInt(((Character) chByte).toString()) * Math.pow(16.0f, iExp);
                        break;
                }
                iExp++;
            }
        }
        catch (Exception ex)
        {
            // Error, return 0
            return 0;
        }
        return iToReturn;
    }

    /*
     * Changes the read function (Read or ReadEx)
     */
    private void changeReadMode(boolean useTimerMode)
    {
        int res;

        //Stop Timer Thread
        if ((canReadThread != null) && (!canReadThread.isInterrupted()))
        {
            canReadThread.interrupt();
            try
            {
                canReadThread.join();
            }
            catch (InterruptedException ex)
            {
            }
        }

        canReadThread = new CANReadThread(canLight, receivedData);
        canReadThread.setUseReadEx(chbTimeStamp.isSelected());
        if (useTimerMode)
        {
            //Reset RcvEvent thread if it's running
            res = canLight.resetRcvEvent();

            // An error occurred.  We show the error.
            if (res != CANLight.ERR_OK)
            {
                showInfo(getErrorName(res), true);
                return;
            }

            //Start Timer Thread to read CAN Messages
            canReadThread.start();
        }
        else
        {
            //Set canReadThread as RcvEvent Listener
            RcvEventDispatcher.setListener(canReadThread);

            //Set Rcv Event
            canLight.setRcvEvent();
        }
    }
}
